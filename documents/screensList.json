{
  "key": "screensList",
  "value": [
    {
      "id": "SCR-001",
      "category": "認証",
      "screenName": "ログイン画面",
      "description": "システムにアクセスするためのログイン認証を行う画面",
      "Screen components": "ログインフォーム（メールアドレス、パスワード）、ログインボタン",
      "operatingProcedure": "1. メールアドレスを入力\n2. パスワードを入力\n3. ログインボタンをクリック",
      "user": "図書館職員、システム管理者",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "getData": "[]",
      "postData": "[{\"table\":\"users\",\"items\":[\"email\",\"password\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Footer.tsx\", \"LoginForm.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-001",
          "category": "認証管理",
          "handleName": "ログイン認証",
          "description": "ユーザーのログイン認証を行い、JWTトークンを発行する",
          "handleProcedure": "1. メールアドレスとパスワードを受け取る\n2. パスワードのハッシュ化\n3. データベースで認証情報を照合\n4. JWTトークンの生成\n5. レスポンスの返却",
          "fileName": "auth-login.ts",
          "relatedScreen": "SCR-001",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { IoLibrary } from \"react-icons/io5\"\nimport { supabase } from \"@/supabase\"\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) throw error\n\n      if (data.user) {\n        router.push(\"/menu\")\n      }\n    } catch (error: any) {\n      setError(\"ログインに失敗しました。メールアドレスとパスワードを確認してください。\")\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gradient-to-b from-gray-50 to-gray-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg\">\n        <div className=\"text-center\">\n          <IoLibrary className=\"mx-auto h-12 w-12 text-[#2C4F7C]\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\n            図書館管理システム\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            システムにアクセスするにはログインしてください\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n          {error && (\n            <div className=\"bg-red-50 text-red-500 p-3 rounded-md text-sm\">\n              {error}\n            </div>\n          )}\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email\" className=\"sr-only\">\n                メールアドレス\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-[#2C4F7C] focus:border-[#2C4F7C] focus:z-10 sm:text-sm\"\n                placeholder=\"メールアドレス\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                パスワード\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-[#2C4F7C] focus:border-[#2C4F7C] focus:z-10 sm:text-sm\"\n                placeholder=\"パスワード\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-[#2C4F7C] hover:bg-[#1a3456] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#2C4F7C]\"\n            >\n              ログイン\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}"
        }
      ]
    },
    {
      "id": "SCR-002",
      "category": "メイン",
      "screenName": "メインメニュー",
      "description": "システムの主要機能にアクセスするためのメニュー画面",
      "Screen components": "機能選択メニュー、ユーザー情報表示、お知らせ欄",
      "operatingProcedure": "各機能のメニューボタンをクリックして該当機能の画面に遷移",
      "user": "図書館職員、システム管理者",
      "accessRight": "ログインユーザー",
      "fileName": "dashboard.tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"name\",\"role\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"Footer.tsx\", \"NotificationPanel.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-003",
      "category": "書籍貸出管理",
      "screenName": "書籍貸出画面",
      "description": "書籍の貸出処理を行う画面",
      "Screen components": "利用者番号入力フォーム、書籍番号入力フォーム、貸出ボタン",
      "operatingProcedure": "1. 利用者番号を入力\n2. 書籍番号を入力\n3. 貸出内容を確認\n4. 貸出ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "lending/index.tsx",
      "getData": "[{\"table\":\"books\",\"items\":[\"status\"]}, {\"table\":\"users\",\"items\":[\"user_id\",\"name\"]}]",
      "postData": "[{\"table\":\"loans\",\"items\":[\"book_id\",\"user_id\",\"loan_date\",\"due_date\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"SearchForm.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-002",
          "category": "書籍貸出管理",
          "handleName": "貸出可能判定",
          "description": "書籍の貸出可否を判定し、貸出処理を実行する",
          "handleProcedure": "1. 利用者の貸出制限確認\n2. 書籍の貸出状態確認\n3. トランザクション開始\n4. 貸出記録の登録\n5. 書籍状態の更新\n6. トランザクション終了",
          "fileName": "lending-process.ts",
          "relatedScreen": "SCR-003",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/supabase'\nimport { IoMdBook } from 'react-icons/io'\nimport { FaUser } from 'react-icons/fa'\nimport { BiSolidError } from 'react-icons/bi'\nimport { IoCheckmarkCircle } from 'react-icons/io5'\n\nconst LendingPage = () => {\n  const router = useRouter()\n  const [userId, setUserId] = useState('')\n  const [bookId, setBookId] = useState('')\n  const [userName, setUserName] = useState('')\n  const [bookStatus, setBookStatus] = useState('')\n  const [message, setMessage] = useState({ type: '', content: '' })\n  const [loading, setLoading] = useState(false)\n\n  const checkUser = async (id: string) => {\n    if (!id) return\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('name')\n        .eq('user_id', id)\n        .single()\n\n      if (error) throw error\n      if (data) {\n        setUserName(data.name)\n        setMessage({ type: 'success', content: 'ユーザーが見つかりました' })\n      }\n    } catch (error) {\n      setMessage({ type: 'error', content: 'ユーザーが見つかりません' })\n      setUserName('')\n    }\n  }\n\n  const checkBook = async (id: string) => {\n    if (!id) return\n    try {\n      const { data, error } = await supabase\n        .from('books')\n        .select('status')\n        .eq('book_id', id)\n        .single()\n\n      if (error) throw error\n      if (data) {\n        setBookStatus(data.status)\n        setMessage({\n          type: data.status === '貸出可能' ? 'success' : 'error',\n          content: `書籍は${data.status}です`\n        })\n      }\n    } catch (error) {\n      setMessage({ type: 'error', content: '書籍が見つかりません' })\n      setBookStatus('')\n    }\n  }\n\n  const handleLending = async () => {\n    if (!userId || !bookId) {\n      setMessage({ type: 'error', content: '必要な情報を入力してください' })\n      return\n    }\n\n    setLoading(true)\n    try {\n      const loanDate = new Date()\n      const dueDate = new Date()\n      dueDate.setDate(dueDate.getDate() + 14)\n\n      const { error } = await supabase.from('loans').insert([\n        {\n          book_id: bookId,\n          user_id: userId,\n          loan_date: loanDate.toISOString(),\n          due_date: dueDate.toISOString()\n        }\n      ])\n\n      if (error) throw error\n\n      await supabase\n        .from('books')\n        .update({ status: '貸出中' })\n        .eq('book_id', bookId)\n\n      setMessage({ type: 'success', content: '貸出処理が完了しました' })\n      setUserId('')\n      setBookId('')\n      setUserName('')\n      setBookStatus('')\n    } catch (error) {\n      setMessage({ type: 'error', content: '貸出処理に失敗しました' })\n    }\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-8\">書籍貸出</h1>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              利用者ID\n            </label>\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center\">\n                  <FaUser className=\"text-gray-400\" />\n                </span>\n                <input\n                  type=\"text\"\n                  value={userId}\n                  onChange={(e) => setUserId(e.target.value)}\n                  onBlur={() => checkUser(userId)}\n                  className=\"pl-10 w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary\"\n                  placeholder=\"利用者IDを入力\"\n                />\n              </div>\n              {userName && (\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <IoCheckmarkCircle className=\"text-green-500 mr-2\" />\n                  {userName}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              書籍ID\n            </label>\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center\">\n                  <IoMdBook className=\"text-gray-400\" />\n                </span>\n                <input\n                  type=\"text\"\n                  value={bookId}\n                  onChange={(e) => setBookId(e.target.value)}\n                  onBlur={() => checkBook(bookId)}\n                  className=\"pl-10 w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary\"\n                  placeholder=\"書籍IDを入力\"\n                />\n              </div>\n              {bookStatus && (\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  {bookStatus === '貸出可能' ? (\n                    <IoCheckmarkCircle className=\"text-green-500 mr-2\" />\n                  ) : (\n                    <BiSolidError className=\"text-red-500 mr-2\" />\n                  )}\n                  {bookStatus}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {message.content && (\n            <div\n              className={`p-4 rounded-md mb-6 ${\n                message.type === 'error'\n                  ? 'bg-red-50 text-red-700'\n                  : 'bg-green-50 text-green-700'\n              }`}\n            >\n              {message.content}\n            </div>\n          )}\n\n          <button\n            onClick={handleLending}\n            disabled={loading || !userId || !bookId || bookStatus !== '貸出可能'}\n            className=\"w-full bg-primary text-white py-2 px-4 rounded-md hover:bg-primary-dark disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\n          >\n            {loading ? '処理中...' : '貸出実行'}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LendingPage"
        }
      ]
    },
    {
      "id": "SCR-004",
      "category": "書籍貸出管理",
      "screenName": "利用者情報確認画面",
      "description": "貸出処理時の利用者情報を確認する画面",
      "Screen components": "利用者情報表示、貸出中書籍一覧、確認ボタン",
      "operatingProcedure": "1. 表示された利用者情報を確認\n2. 貸出中の書籍情報を確認\n3. 確認ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "lending/user-confirm.tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"*\"]}, {\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"books\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"UserInfoCard.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-005",
      "category": "書籍返却管理",
      "screenName": "返却管理一覧画面",
      "description": "返却処理を行う書籍の一覧を表示する画面",
      "Screen components": "返却書籍一覧テーブル、返却処理ボタン、検索フォーム",
      "operatingProcedure": "1. 返却する書籍を検索\n2. 該当書籍の返却処理ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "return/index.tsx",
      "getData": "[{\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"books\",\"items\":[\"*\"]}, {\"table\":\"users\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"DataTable.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-006",
      "category": "書籍マスター管理",
      "screenName": "書籍一覧画面",
      "description": "登録されている全書籍の一覧を表示・管理する画面",
      "Screen components": "書籍一覧テーブル、新規登録ボタン、編集ボタン、検索フォーム",
      "operatingProcedure": "1. 書籍の検索または一覧表示\n2. 新規登録または編集操作の選択",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "books/index.tsx",
      "getData": "[{\"table\":\"books\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"DataTable.tsx\", \"SearchForm.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-007",
      "category": "延滞管理",
      "screenName": "延滞管理トップ",
      "description": "延滞書籍の管理機能にアクセスするための画面",
      "Screen components": "延滞書籍一覧、通知管理メニュー、統計情報",
      "operatingProcedure": "1. 延滞書籍の確認\n2. 必要な管理機能の選択",
      "user": "システム管理者",
      "accessRight": "ログインユーザー",
      "fileName": "overdue/index.tsx",
      "getData": "[{\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"overdue_notifications\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"StatisticsPanel.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-008",
      "category": "利用者管理",
      "screenName": "利用者一覧画面",
      "description": "登録されている利用者の一覧を表示・管理する画面",
      "Screen components": "利用者一覧テーブル、新規登録ボタン、編集ボタン、検索フォーム",
      "operatingProcedure": "1. 利用者の検索または一覧表示\n2. 新規登録または編集操作の選択",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "users/index.tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"DataTable.tsx\", \"SearchForm.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-009",
      "category": "貸出状況管理",
      "screenName": "貸出状況管理メニュー",
      "description": "貸出状況の各種確認機能にアクセスするための画面",
      "Screen components": "書籍別状況確認、利用者別状況確認、統計情報確認の各メニュー",
      "operatingProcedure": "必要な確認機能のメニューを選択",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "status/index.tsx",
      "getData": "[]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"MenuCard.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-010",
      "category": "書籍マスター管理",
      "screenName": "書籍新規登録画面",
      "description": "新しい書籍情報を登録する画面",
      "Screen components": "書籍情報入力フォーム、登録ボタン、キャンセルボタン",
      "operatingProcedure": "1. 書籍情報を入力\n2. 重複チェック\n3. 登録ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "books/register.tsx",
      "getData": "[]",
      "postData": "[{\"table\":\"books\",\"items\":[\"isbn\",\"title\",\"author\",\"publisher\",\"status\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"BookForm.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-006",
          "category": "書籍マスター管理",
          "handleName": "ISBNによる書籍情報取得",
          "description": "外部APIを使用してISBNから書籍情報を取得する",
          "handleProcedure": "1. ISBNコードの受け取り\n2. 外部APIへのリクエスト\n3. レスポンスデータの整形\n4. 書籍情報の返却",
          "fileName": "books-isbn-fetch.ts",
          "relatedScreen": "SCR-010",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { FiBook, FiSearch, FiSave, FiX } from 'react-icons/fi'\nimport { supabase } from '@/supabase'\n\nexport default function RegisterBook() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    isbn: '',\n    title: '',\n    author: '',\n    publisher: '',\n    status: '利用可能'\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  const handleISBNSearch = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/books-isbn-fetch?isbn=${formData.isbn}`)\n      const data = await response.json()\n      \n      if (data) {\n        setFormData({\n          ...formData,\n          title: data.title || '',\n          author: data.author || '',\n          publisher: data.publisher || ''\n        })\n      }\n    } catch (error) {\n      setError('ISBN検索中にエラーが発生しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    \n    try {\n      const { error } = await supabase\n        .from('books')\n        .insert([formData])\n\n      if (error) throw error\n\n      router.push('/books')\n    } catch (error) {\n      setError('書籍の登録に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"bg-white rounded-lg shadow-md p-8\">\n          <div className=\"flex items-center mb-6\">\n            <FiBook className=\"text-2xl text-primary mr-2\" />\n            <h1 className=\"text-2xl font-bold text-gray-800\">書籍新規登録</h1>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  ISBN\n                </label>\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={formData.isbn}\n                    onChange={(e) => setFormData({...formData, isbn: e.target.value})}\n                    className=\"flex-1 rounded-md border border-gray-300 p-2\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={handleISBNSearch}\n                    className=\"flex items-center gap-2 bg-secondary text-white px-4 py-2 rounded-md hover:bg-opacity-90\"\n                  >\n                    <FiSearch />\n                    <span>ISBN検索</span>\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  タイトル\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({...formData, title: e.target.value})}\n                  className=\"w-full rounded-md border border-gray-300 p-2\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  著者\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.author}\n                  onChange={(e) => setFormData({...formData, author: e.target.value})}\n                  className=\"w-full rounded-md border border-gray-300 p-2\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  出版社\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.publisher}\n                  onChange={(e) => setFormData({...formData, publisher: e.target.value})}\n                  className=\"w-full rounded-md border border-gray-300 p-2\"\n                  required\n                />\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 text-red-500 p-3 rounded-md\">\n                {error}\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-4\">\n              <button\n                type=\"button\"\n                onClick={() => router.back()}\n                className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n              >\n                <FiX />\n                <span>キャンセル</span>\n              </button>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"flex items-center gap-2 bg-primary text-white px-4 py-2 rounded-md hover:bg-opacity-90 disabled:opacity-50\"\n              >\n                <FiSave />\n                <span>{loading ? '登録中...' : '登録する'}</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}"
        }
      ]
    },
    {
      "id": "SCR-011",
      "category": "延滞管理",
      "screenName": "延滞書籍検索画面",
      "description": "延滞している書籍を検索する画面",
      "Screen components": "検索条件入力フォーム、検索結果一覧、通知送信ボタン",
      "operatingProcedure": "1. 検索条件を入力\n2. 検索実行\n3. 必要に応じて通知送信",
      "user": "システム管理者",
      "accessRight": "ログインユーザー",
      "fileName": "overdue/search.tsx",
      "getData": "[{\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"books\",\"items\":[\"*\"]}, {\"table\":\"users\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"SearchForm.tsx\", \"DataTable.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-008",
          "category": "延滞管理",
          "handleName": "延滞リスト自動生成",
          "description": "日次バッチ処理による延滞リストの生成",
          "handleProcedure": "1. 返却期限切れの貸出データ抽出\n2. 利用者情報の紐付け\n3. 書籍情報の紐付け\n4. 延滞リストの生成\n5. 通知対象の特定",
          "fileName": "overdue-list-generator.ts",
          "relatedScreen": "SCR-011",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { FiSearch, FiMail, FiCalendar } from 'react-icons/fi'\nimport { supabase } from '@/supabase'\nimport Link from 'next/link'\n\ntype OverdueBook = {\n  loan_id: string\n  book_id: string\n  user_id: string\n  loan_date: string\n  due_date: string\n  return_date: string | null\n  title: string\n  author: string\n  isbn: string\n  user_name: string\n  email: string\n}\n\nconst OverdueSearchPage = () => {\n  const router = useRouter()\n  const [overdueBooks, setOverdueBooks] = useState<OverdueBook[]>([])\n  const [searchParams, setSearchParams] = useState({\n    isbn: '',\n    title: '',\n    userName: '',\n    dueDateFrom: '',\n    dueDateTo: ''\n  })\n  const [loading, setLoading] = useState(false)\n\n  const fetchOverdueBooks = async () => {\n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from('loans')\n        .select(`\n          *,\n          books (title, author, isbn),\n          users (name, email)\n        `)\n        .is('return_date', null)\n        .lt('due_date', new Date().toISOString())\n\n      if (error) throw error\n\n      const formattedData = data.map(loan => ({\n        loan_id: loan.loan_id,\n        book_id: loan.book_id,\n        user_id: loan.user_id,\n        loan_date: loan.loan_date,\n        due_date: loan.due_date,\n        return_date: loan.return_date,\n        title: loan.books.title,\n        author: loan.books.author,\n        isbn: loan.books.isbn,\n        user_name: loan.users.name,\n        email: loan.users.email\n      }))\n\n      setOverdueBooks(formattedData)\n    } catch (error) {\n      console.error('Error fetching overdue books:', error)\n      // サンプルデータ\n      setOverdueBooks([\n        {\n          loan_id: '1',\n          book_id: '1',\n          user_id: '1',\n          loan_date: '2024-01-01',\n          due_date: '2024-01-15',\n          return_date: null,\n          title: 'サンプル書籍',\n          author: 'サンプル著者',\n          isbn: '1234567890123',\n          user_name: '山田太郎',\n          email: 'sample@example.com'\n        }\n      ])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchOverdueBooks()\n  }, [])\n\n  const handleSearch = () => {\n    let filtered = overdueBooks\n\n    if (searchParams.isbn) {\n      filtered = filtered.filter(book => book.isbn.includes(searchParams.isbn))\n    }\n    if (searchParams.title) {\n      filtered = filtered.filter(book => \n        book.title.toLowerCase().includes(searchParams.title.toLowerCase())\n      )\n    }\n    if (searchParams.userName) {\n      filtered = filtered.filter(book =>\n        book.user_name.toLowerCase().includes(searchParams.userName.toLowerCase())\n      )\n    }\n    if (searchParams.dueDateFrom) {\n      filtered = filtered.filter(book =>\n        new Date(book.due_date) >= new Date(searchParams.dueDateFrom)\n      )\n    }\n    if (searchParams.dueDateTo) {\n      filtered = filtered.filter(book =>\n        new Date(book.due_date) <= new Date(searchParams.dueDateTo)\n      )\n    }\n\n    setOverdueBooks(filtered)\n  }\n\n  const handleNotify = async (email: string) => {\n    // 通知処理の実装\n    alert(`${email}に通知を送信しました。`)\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <div className=\"flex\">\n        <nav className=\"w-64 min-h-screen bg-[#2C4F7C] text-white p-4\">\n          <div className=\"text-xl font-bold mb-8\">図書館管理システム</div>\n          <ul className=\"space-y-2\">\n            <li>\n              <Link href=\"/books\" className=\"block p-2 hover:bg-[#8FA5BC] rounded\">\n                書籍管理\n              </Link>\n            </li>\n            <li>\n              <Link href=\"/users\" className=\"block p-2 hover:bg-[#8FA5BC] rounded\">\n                利用者管理\n              </Link>\n            </li>\n            <li>\n              <Link href=\"/loans\" className=\"block p-2 hover:bg-[#8FA5BC] rounded\">\n                貸出管理\n              </Link>\n            </li>\n            <li>\n              <Link href=\"/overdue\" className=\"block p-2 bg-[#8FA5BC] rounded\">\n                延滞管理\n              </Link>\n            </li>\n          </ul>\n        </nav>\n\n        <main className=\"flex-1 p-8\">\n          <h1 className=\"text-2xl font-bold mb-6\">延滞書籍検索</h1>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n            <div className=\"grid grid-cols-3 gap-4 mb-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  ISBN\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border rounded\"\n                  value={searchParams.isbn}\n                  onChange={(e) => setSearchParams({...searchParams, isbn: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  書籍タイトル\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border rounded\"\n                  value={searchParams.title}\n                  onChange={(e) => setSearchParams({...searchParams, title: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  利用者名\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 border rounded\"\n                  value={searchParams.userName}\n                  onChange={(e) => setSearchParams({...searchParams, userName: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  返却期限（開始）\n                </label>\n                <input\n                  type=\"date\"\n                  className=\"w-full p-2 border rounded\"\n                  value={searchParams.dueDateFrom}\n                  onChange={(e) => setSearchParams({...searchParams, dueDateFrom: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  返却期限（終了）\n                </label>\n                <input\n                  type=\"date\"\n                  className=\"w-full p-2 border rounded\"\n                  value={searchParams.dueDateTo}\n                  onChange={(e) => setSearchParams({...searchParams, dueDateTo: e.target.value})}\n                />\n              </div>\n            </div>\n            <button\n              onClick={handleSearch}\n              className=\"bg-[#2C4F7C] text-white px-4 py-2 rounded flex items-center\"\n            >\n              <FiSearch className=\"mr-2\" />\n              検索\n            </button>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-md\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      ISBN\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      書籍タイトル\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      利用者名\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      貸出日\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      返却期限\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      操作\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {loading ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-4 text-center\">\n                        読み込み中...\n                      </td>\n                    </tr>\n                  ) : overdueBooks.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-4 text-center\">\n                        該当する延滞書籍はありません\n                      </td>\n                    </tr>\n                  ) : (\n                    overdueBooks.map((book) => (\n                      <tr key={book.loan_id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {book.isbn}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {book.title}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {book.user_name}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {new Date(book.loan_date).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {new Date(book.due_date).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <button\n                            onClick={() => handleNotify(book.email)}\n                            className=\"bg-[#E6B422] text-white px-3 py-1 rounded flex items-center\"\n                          >\n                            <FiMail className=\"mr-1\" />\n                            通知\n                          </button>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default OverdueSearchPage"
        }
      ]
    },
    {
      "id": "SCR-012",
      "category": "利用者管理",
      "screenName": "利用者新規登録画面",
      "description": "新しい利用者情報を登録する画面",
      "Screen components": "利用者情報入力フォーム、登録ボタン、キャンセルボタン",
      "operatingProcedure": "1. 利用者情報を入力\n2. 重複チェック\n3. 登録ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "users/register.tsx",
      "getData": "[]",
      "postData": "[{\"table\":\"users\",\"items\":[\"name\",\"email\",\"phone\",\"address\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"UserForm.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-007",
          "category": "利用者管理",
          "handleName": "利用者重複チェック",
          "description": "新規利用者登録時の重複チェックを行う",
          "handleProcedure": "1. 利用者情報の受け取り\n2. メールアドレスの重複チェック\n3. 電話番号の重複チェック\n4. チェック結果の返却",
          "fileName": "users-duplicate-check.ts",
          "relatedScreen": "SCR-012",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/supabase'\nimport { FiUser, FiMail, FiPhone, FiMapPin, FiCheck, FiX } from 'react-icons/fi'\nimport Link from 'next/link'\nimport { AiOutlineMenu } from 'react-icons/ai'\n\nconst RegisterUser = () => {\n  const router = useRouter()\n  const [isOpen, setIsOpen] = useState(false)\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    address: ''\n  })\n  const [errors, setErrors] = useState({})\n  const [duplicateCheck, setDuplicateCheck] = useState({\n    email: null,\n    phone: null\n  })\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }))\n    setDuplicateCheck(prev => ({\n      ...prev,\n      [name]: null\n    }))\n  }\n\n  const checkDuplicate = async () => {\n    try {\n      const { data: emailCheck } = await supabase\n        .from('users')\n        .select('email')\n        .eq('email', formData.email)\n        .single()\n\n      const { data: phoneCheck } = await supabase\n        .from('users')\n        .select('phone')\n        .eq('phone', formData.phone)\n        .single()\n\n      setDuplicateCheck({\n        email: !emailCheck,\n        phone: !phoneCheck\n      })\n\n      return !emailCheck && !phoneCheck\n    } catch (error) {\n      console.error('重複チェックエラー:', error)\n      return false\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    const isValid = await checkDuplicate()\n\n    if (!isValid) {\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .insert([formData])\n\n      if (error) throw error\n\n      router.push('/users')\n    } catch (error) {\n      console.error('登録エラー:', error)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-[#2C4F7C] text-white transform ${isOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out md:translate-x-0 md:static`}>\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-bold mb-8\">図書館管理システム</h2>\n            <nav>\n              <Link href=\"/books\" className=\"block py-2 px-4 hover:bg-[#8FA5BC] rounded\">\n                書籍管理\n              </Link>\n              <Link href=\"/loans\" className=\"block py-2 px-4 hover:bg-[#8FA5BC] rounded\">\n                貸出管理\n              </Link>\n              <Link href=\"/returns\" className=\"block py-2 px-4 hover:bg-[#8FA5BC] rounded\">\n                返却管理\n              </Link>\n              <Link href=\"/users\" className=\"block py-2 px-4 hover:bg-[#8FA5BC] rounded\">\n                利用者管理\n              </Link>\n            </nav>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1\">\n          <header className=\"bg-white shadow-sm\">\n            <div className=\"flex justify-between items-center p-4\">\n              <button\n                className=\"md:hidden text-gray-600\"\n                onClick={() => setIsOpen(!isOpen)}\n              >\n                <AiOutlineMenu size={24} />\n              </button>\n              <h1 className=\"text-xl font-bold text-[#2C4F7C]\">利用者新規登録</h1>\n              <div className=\"w-8\"></div>\n            </div>\n          </header>\n\n          <main className=\"p-6\">\n            <div className=\"max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    氏名\n                  </label>\n                  <div className=\"relative\">\n                    <FiUser className=\"absolute top-3 left-3 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleChange}\n                      className=\"pl-10 w-full p-2 border rounded-md focus:ring-2 focus:ring-[#2C4F7C] focus:border-transparent\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    メールアドレス\n                  </label>\n                  <div className=\"relative\">\n                    <FiMail className=\"absolute top-3 left-3 text-gray-400\" />\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      className=\"pl-10 w-full p-2 border rounded-md focus:ring-2 focus:ring-[#2C4F7C] focus:border-transparent\"\n                      required\n                    />\n                    {duplicateCheck.email !== null && (\n                      <span className={`absolute right-3 top-3 ${duplicateCheck.email ? 'text-green-500' : 'text-red-500'}`}>\n                        {duplicateCheck.email ? <FiCheck /> : <FiX />}\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    電話番号\n                  </label>\n                  <div className=\"relative\">\n                    <FiPhone className=\"absolute top-3 left-3 text-gray-400\" />\n                    <input\n                      type=\"tel\"\n                      name=\"phone\"\n                      value={formData.phone}\n                      onChange={handleChange}\n                      className=\"pl-10 w-full p-2 border rounded-md focus:ring-2 focus:ring-[#2C4F7C] focus:border-transparent\"\n                      required\n                    />\n                    {duplicateCheck.phone !== null && (\n                      <span className={`absolute right-3 top-3 ${duplicateCheck.phone ? 'text-green-500' : 'text-red-500'}`}>\n                        {duplicateCheck.phone ? <FiCheck /> : <FiX />}\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    住所\n                  </label>\n                  <div className=\"relative\">\n                    <FiMapPin className=\"absolute top-3 left-3 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      name=\"address\"\n                      value={formData.address}\n                      onChange={handleChange}\n                      className=\"pl-10 w-full p-2 border rounded-md focus:ring-2 focus:ring-[#2C4F7C] focus:border-transparent\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Link\n                    href=\"/users\"\n                    className=\"px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors\"\n                  >\n                    キャンセル\n                  </Link>\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-[#2C4F7C] text-white rounded-md hover:bg-[#8FA5BC] transition-colors\"\n                  >\n                    登録\n                  </button>\n                </div>\n              </form>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RegisterUser"
        }
      ]
    },
    {
      "id": "SCR-013",
      "category": "貸出状況管理",
      "screenName": "書籍別貸出状況画面",
      "description": "個別の書籍の貸出状況を確認する画面",
      "Screen components": "書籍情報表示、貸出履歴一覧、状態表示",
      "operatingProcedure": "1. 書籍を検索\n2. 貸出状況を確認",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "status/book/[id].tsx",
      "getData": "[{\"table\":\"books\",\"items\":[\"*\"]}, {\"table\":\"loans\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"BookStatusCard.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-014",
      "category": "書籍返却管理",
      "screenName": "返却処理入力画面",
      "description": "書籍の返却処理を行う画面",
      "Screen components": "書籍番号入力フォーム、返却ボタン、貸出情報表示",
      "operatingProcedure": "1. 書籍番号を入力\n2. 貸出情報を確認\n3. 返却ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "return/process.tsx",
      "getData": "[{\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"books\",\"items\":[\"*\"]}]",
      "postData": "[{\"table\":\"loans\",\"items\":[\"return_date\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"ReturnForm.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-004",
          "category": "書籍返却管理",
          "handleName": "返却処理",
          "description": "書籍返却時のステータス更新とトランザクション管理",
          "handleProcedure": "1. 貸出記録の存在確認\n2. トランザクション開始\n3. 返却日時の記録\n4. 書籍状態の更新\n5. トランザクション終了",
          "fileName": "return-process.ts",
          "relatedScreen": "SCR-014",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { FaBook, FaUser, FaCalendar, FaCheck } from 'react-icons/fa'\nimport { supabase } from '@/supabase'\nimport Link from 'next/link'\n\nconst ReturnProcess = () => {\n  const router = useRouter()\n  const [bookId, setBookId] = useState('')\n  const [loanInfo, setLoanInfo] = useState<any>(null)\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const fetchLoanInfo = async (id: string) => {\n    try {\n      const { data: loanData, error: loanError } = await supabase\n        .from('loans')\n        .select(`\n          *,\n          books (*),\n          users (*)\n        `)\n        .eq('book_id', id)\n        .is('return_date', null)\n        .single()\n\n      if (loanError) throw loanError\n      if (loanData) setLoanInfo(loanData)\n    } catch (err) {\n      setError('貸出情報の取得に失敗しました')\n    }\n  }\n\n  const handleReturn = async () => {\n    setLoading(true)\n    try {\n      const { error: updateError } = await supabase\n        .from('loans')\n        .update({\n          return_date: new Date().toISOString()\n        })\n        .eq('loan_id', loanInfo.loan_id)\n\n      if (updateError) throw updateError\n\n      const { error: bookError } = await supabase\n        .from('books')\n        .update({ status: '利用可能' })\n        .eq('book_id', bookId)\n\n      if (bookError) throw bookError\n\n      router.push('/return/complete')\n    } catch (err) {\n      setError('返却処理に失敗しました')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        <aside className=\"w-64 bg-white h-screen fixed shadow-md\">\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-bold text-primary\">図書館システム</h2>\n          </div>\n          <nav className=\"mt-4\">\n            <Link href=\"/return/list\" className=\"block px-4 py-2 hover:bg-gray-100\">\n              返却管理一覧\n            </Link>\n            <Link href=\"/return/process\" className=\"block px-4 py-2 bg-primary text-white\">\n              返却処理\n            </Link>\n          </nav>\n        </aside>\n\n        <main className=\"flex-1 ml-64 p-8\">\n          <h1 className=\"text-2xl font-bold mb-8\">返却処理</h1>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium mb-2\">書籍ID</label>\n              <div className=\"flex gap-4\">\n                <input\n                  type=\"text\"\n                  value={bookId}\n                  onChange={(e) => setBookId(e.target.value)}\n                  className=\"border rounded p-2 w-64\"\n                  placeholder=\"書籍IDを入力\"\n                />\n                <button\n                  onClick={() => fetchLoanInfo(bookId)}\n                  className=\"bg-secondary text-white px-4 py-2 rounded hover:opacity-90\"\n                >\n                  検索\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"bg-red-100 text-red-600 p-4 rounded mb-4\">\n                {error}\n              </div>\n            )}\n\n            {loanInfo && (\n              <div className=\"border rounded p-6 mb-6\">\n                <h3 className=\"text-lg font-bold mb-4\">貸出情報</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"flex items-center\">\n                    <FaBook className=\"mr-2 text-primary\" />\n                    <span>書籍名: {loanInfo.books.title}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <FaUser className=\"mr-2 text-primary\" />\n                    <span>利用者: {loanInfo.users.name}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <FaCalendar className=\"mr-2 text-primary\" />\n                    <span>貸出日: {new Date(loanInfo.loan_date).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <FaCalendar className=\"mr-2 text-primary\" />\n                    <span>返却期限: {new Date(loanInfo.due_date).toLocaleDateString()}</span>\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleReturn}\n                  disabled={loading}\n                  className=\"mt-6 bg-primary text-white px-6 py-2 rounded flex items-center justify-center hover:opacity-90 disabled:opacity-50\"\n                >\n                  {loading ? (\n                    'Processing...'\n                  ) : (\n                    <>\n                      <FaCheck className=\"mr-2\" />\n                      返却処理を実行\n                    </>\n                  )}\n                </button>\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default ReturnProcess"
        }
      ]
    },
    {
      "id": "SCR-015",
      "category": "延滞管理",
      "screenName": "延滞通知確認画面",
      "description": "延滞者への通知内容を確認する画面",
      "Screen components": "通知内容プレビュー、送信対象者一覧、送信ボタン",
      "operatingProcedure": "1. 通知内容を確認\n2. 送信対象を確認\n3. 送信実行",
      "user": "システム管理者",
      "accessRight": "ログインユーザー",
      "fileName": "overdue/notification/confirm.tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"*\"]}, {\"table\":\"loans\",\"items\":[\"*\"]}]",
      "postData": "[{\"table\":\"overdue_notifications\",\"items\":[\"notification_id\",\"loan_id\",\"sent_date\",\"status\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"NotificationPreview.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-003",
          "category": "延滞管理",
          "handleName": "延滞通知メール送信",
          "description": "延滞者に対して自動メール通知を送信する",
          "handleProcedure": "1. 延滞書籍の検索\n2. 通知テンプレートの生成\n3. メール送信処理\n4. 送信記録の保存\n5. 送信結果の返却",
          "fileName": "overdue-notification.ts",
          "relatedScreen": "SCR-015",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport { FiMail, FiCheck, FiAlertTriangle } from 'react-icons/fi'\nimport { supabase } from '@/supabase'\n\nconst NotificationConfirm = () => {\n  const router = useRouter()\n  const [overdueUsers, setOverdueUsers] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [sending, setSending] = useState(false)\n\n  const notificationTemplate = `\n    図書館からの延滞通知\n\n    お借りいただいた書籍の返却期限が過ぎております。\n    速やかにご返却いただきますようお願いいたします。\n\n    ※このメールは自動送信されています。\n  `\n\n  useEffect(() => {\n    const fetchOverdueLoans = async () => {\n      try {\n        const { data: loans, error } = await supabase\n          .from('loans')\n          .select(`\n            *,\n            users (*),\n            books (*)\n          `)\n          .lt('due_date', new Date().toISOString())\n          .is('return_date', null)\n\n        if (error) throw error\n        setOverdueUsers(loans)\n      } catch (error) {\n        console.error('Error fetching overdue loans:', error)\n        setOverdueUsers([])\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchOverdueLoans()\n  }, [])\n\n  const handleSendNotifications = async () => {\n    setSending(true)\n    try {\n      for (const loan of overdueUsers) {\n        await supabase\n          .from('overdue_notifications')\n          .insert({\n            loan_id: loan.loan_id,\n            sent_date: new Date().toISOString(),\n            notification_type: 'EMAIL',\n            status: 'SENT'\n          })\n      }\n      router.push('/overdue/notification/complete')\n    } catch (error) {\n      console.error('Error sending notifications:', error)\n    } finally {\n      setSending(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex flex-col max-w-6xl mx-auto p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">延滞通知確認</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">通知内容プレビュー</h2>\n          <div className=\"bg-gray-50 p-4 rounded border\">\n            <pre className=\"whitespace-pre-wrap font-sans text-gray-600\">\n              {notificationTemplate}\n            </pre>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n            送信対象者一覧 ({overdueUsers.length}名)\n          </h2>\n          {loading ? (\n            <div className=\"text-center py-4\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      利用者名\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      書籍タイトル\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      返却期限\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      延滞日数\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {overdueUsers.map((loan) => {\n                    const daysOverdue = Math.floor(\n                      (new Date() - new Date(loan.due_date)) / (1000 * 60 * 60 * 24)\n                    )\n                    return (\n                      <tr key={loan.loan_id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">{loan.users.name}</div>\n                          <div className=\"text-sm text-gray-500\">{loan.users.email}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">{loan.books.title}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">\n                            {new Date(loan.due_date).toLocaleDateString()}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800\">\n                            {daysOverdue}日\n                          </span>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end space-x-4\">\n          <Link\n            href=\"/overdue/notification\"\n            className=\"px-6 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\"\n          >\n            戻る\n          </Link>\n          <button\n            onClick={handleSendNotifications}\n            disabled={sending || overdueUsers.length === 0}\n            className={`px-6 py-2 rounded-md text-sm font-medium text-white \n              ${\n                sending || overdueUsers.length === 0\n                  ? 'bg-gray-400 cursor-not-allowed'\n                  : 'bg-primary hover:bg-primary-dark'\n              }`}\n          >\n            {sending ? (\n              <span className=\"flex items-center\">\n                <FiMail className=\"mr-2\" />\n                送信中...\n              </span>\n            ) : (\n              <span className=\"flex items-center\">\n                <FiMail className=\"mr-2\" />\n                通知を送信\n              </span>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NotificationConfirm"
        }
      ]
    },
    {
      "id": "SCR-016",
      "category": "貸出状況管理",
      "screenName": "統計情報出力画面",
      "description": "貸出に関する統計情報を表示・出力する画面",
      "Screen components": "期間選択フォーム、統計グラフ表示、CSV出力ボタン",
      "operatingProcedure": "1. 集計期間を選択\n2. 統計情報を確認\n3. 必要に応じてCSV出力",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "status/statistics.tsx",
      "getData": "[{\"table\":\"loans\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"StatisticsChart.tsx\"]",
      "relatedBackendHandles": [
        {
          "id": "BAC-005",
          "category": "貸出状況管理",
          "handleName": "貸出統計情報集計",
          "description": "期間別の貸出統計情報を集計する",
          "handleProcedure": "1. 集計期間の受け取り\n2. 貸出データの集計\n3. 返却データの集計\n4. 延滞データの集計\n5. 統計情報の生成",
          "fileName": "statistics-aggregate.ts",
          "relatedScreen": "SCR-016",
          "relatedFrontendCode": "\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { BiDownload } from 'react-icons/bi'\nimport { FiCalendar } from 'react-icons/fi'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js'\nimport { Bar } from 'react-chartjs-2'\nimport { supabase } from '@/supabase'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n)\n\nconst StatisticsPage = () => {\n  const router = useRouter()\n  const [startDate, setStartDate] = useState('')\n  const [endDate, setEndDate] = useState('')\n  const [statistics, setStatistics] = useState({\n    labels: [],\n    loanCounts: [],\n    returnCounts: [],\n    overdueCounts: [],\n  })\n\n  const fetchStatistics = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('loans')\n        .select('*')\n        .gte('loan_date', startDate)\n        .lte('loan_date', endDate)\n\n      if (error) throw error\n\n      // サンプルデータ（実際はデータを適切に加工）\n      const sampleData = {\n        labels: ['1月', '2月', '3月', '4月', '5月', '6月'],\n        loanCounts: [65, 59, 80, 81, 56, 55],\n        returnCounts: [45, 50, 75, 78, 52, 50],\n        overdueCounts: [10, 5, 8, 12, 15, 7],\n      }\n      setStatistics(sampleData)\n    } catch (error) {\n      console.error('統計情報の取得に失敗しました:', error)\n    }\n  }\n\n  const chartData = {\n    labels: statistics.labels,\n    datasets: [\n      {\n        label: '貸出数',\n        data: statistics.loanCounts,\n        backgroundColor: 'rgba(44, 79, 124, 0.5)',\n        borderColor: 'rgba(44, 79, 124, 1)',\n        borderWidth: 1,\n      },\n      {\n        label: '返却数',\n        data: statistics.returnCounts,\n        backgroundColor: 'rgba(143, 165, 188, 0.5)',\n        borderColor: 'rgba(143, 165, 188, 1)',\n        borderWidth: 1,\n      },\n      {\n        label: '延滞数',\n        data: statistics.overdueCounts,\n        backgroundColor: 'rgba(230, 180, 34, 0.5)',\n        borderColor: 'rgba(230, 180, 34, 1)',\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: '貸出統計情報',\n      },\n    },\n  }\n\n  const handleExportCSV = () => {\n    const csvContent = `期間,${statistics.labels.join(',')}\n貸出数,${statistics.loanCounts.join(',')}\n返却数,${statistics.returnCounts.join(',')}\n延滞数,${statistics.overdueCounts.join(',')}`\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })\n    const link = document.createElement('a')\n    link.href = URL.createObjectURL(blob)\n    link.download = '貸出統計情報.csv'\n    link.click()\n  }\n\n  useEffect(() => {\n    if (startDate && endDate) {\n      fetchStatistics()\n    }\n  }, [startDate, endDate])\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-8\">統計情報出力</h1>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <div className=\"flex flex-wrap gap-4 mb-6\">\n            <div className=\"flex items-center\">\n              <FiCalendar className=\"mr-2 text-gray-500\" />\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"border rounded px-3 py-2\"\n              />\n            </div>\n            <span className=\"text-gray-500\">〜</span>\n            <div className=\"flex items-center\">\n              <FiCalendar className=\"mr-2 text-gray-500\" />\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"border rounded px-3 py-2\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mb-8\">\n            <Bar data={chartData} options={chartOptions} />\n          </div>\n\n          <button\n            onClick={handleExportCSV}\n            className=\"flex items-center justify-center px-4 py-2 bg-primary text-white rounded hover:bg-opacity-90 transition-colors\"\n          >\n            <BiDownload className=\"mr-2\" />\n            CSV出力\n          </button>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">統計サマリー</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">総貸出数</h3>\n              <p className=\"text-2xl font-bold text-primary\">\n                {statistics.loanCounts.reduce((a, b) => a + b, 0)}\n              </p>\n            </div>\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">総返却数</h3>\n              <p className=\"text-2xl font-bold text-secondary\">\n                {statistics.returnCounts.reduce((a, b) => a + b, 0)}\n              </p>\n            </div>\n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">総延滞数</h3>\n              <p className=\"text-2xl font-bold text-accent\">\n                {statistics.overdueCounts.reduce((a, b) => a + b, 0)}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatisticsPage"
        }
      ]
    },
    {
      "id": "SCR-017",
      "category": "書籍マスター管理",
      "screenName": "書籍情報編集画面",
      "description": "既存の書籍情報を編集する画面",
      "Screen components": "書籍情報編集フォーム、更新ボタン、削除ボタン",
      "operatingProcedure": "1. 書籍情報を編集\n2. 更新内容を確認\n3. 更新ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "books/[id]/edit.tsx",
      "getData": "[{\"table\":\"books\",\"items\":[\"*\"]}]",
      "postData": "[{\"table\":\"books\",\"items\":[\"isbn\",\"title\",\"author\",\"publisher\",\"status\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"BookForm.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-018",
      "category": "利用者管理",
      "screenName": "利用者情報編集画面",
      "description": "既存の利用者情報を編集する画面",
      "Screen components": "利用者情報編集フォーム、更新ボタン、削除ボタン",
      "operatingProcedure": "1. 利用者情報を編集\n2. 更新内容を確認\n3. 更新ボタンをクリック",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "users/[id]/edit.tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"*\"]}]",
      "postData": "[{\"table\":\"users\",\"items\":[\"name\",\"email\",\"phone\",\"address\"]}]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"UserForm.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-019",
      "category": "延滞管理",
      "screenName": "延滞記録管理画面",
      "description": "延滞通知の送信記録を管理する画面",
      "Screen components": "送信記録一覧、詳細表示、フィルター機能",
      "operatingProcedure": "1. 送信記録を検索\n2. 詳細を確認",
      "user": "システム管理者",
      "accessRight": "ログインユーザー",
      "fileName": "overdue/records.tsx",
      "getData": "[{\"table\":\"overdue_notifications\",\"items\":[\"*\"]}, {\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"users\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"DataTable.tsx\"]",
      "relatedBackendHandles": []
    },
    {
      "id": "SCR-020",
      "category": "貸出状況管理",
      "screenName": "利用者別貸出状況画面",
      "description": "個別の利用者の貸出状況を確認する画面",
      "Screen components": "利用者情報表示、貸出中書籍一覧、貸出履歴表示",
      "operatingProcedure": "1. 利用者を検索\n2. 貸出状況を確認",
      "user": "図書館職員",
      "accessRight": "ログインユーザー",
      "fileName": "status/user/[id].tsx",
      "getData": "[{\"table\":\"users\",\"items\":[\"*\"]}, {\"table\":\"loans\",\"items\":[\"*\"]}, {\"table\":\"books\",\"items\":[\"*\"]}]",
      "postData": "[]",
      "commonComponent": "[\"Header.tsx\", \"Sidebar.tsx\", \"UserStatusCard.tsx\"]",
      "relatedBackendHandles": []
    }
  ]
}
